@page "/payees/create"
@page "/payees/{id:int}/edit"
@inject DatabaseProvider DatabaseProvider
@inject NavigationManager NavigationManager

<h1>Create payee</h1>

<LoadingIndicator IsLoading="database == null">
    <EditForm Model="@model" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>
                Name
                <InputText @bind-Value="model.Name" />
            </label>
        </div>

        <div class="form-group">
            <label>
                Default category
                <InputSelectCategory IsOptional="true" @bind-Value="model.Category" />
            </label>
        </div>

        <button type="submit">Submit</button>
    </EditForm>
</LoadingIndicator>

@code {
	Database? database;
	EditModel model = new EditModel();

	[Parameter]
	public int? Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		database = await DatabaseProvider.GetDatabase();
	}

	protected override void OnParametersSet()
	{
		var payee = database?.GetPayeeById(Id);
		if (payee == null && Id != null)
		{
			NavigationManager.NavigateToPayees();
			return;
		}

		if (payee != null)
		{
			model = new EditModel
            {
                Name = payee.Name,
                Category = payee.DefaultCategory,
            };
		}
	}

	private async Task OnSubmit()
	{
		Debug.Assert(database != null);
		var payee = database.GetPayeeById(Id) ?? new Payee();

		payee.Name = model.Name.TrimAndNullify();
		payee.DefaultCategory = model.Category;

		database.SavePayee(payee);
		await DatabaseProvider.Save();
		NavigationManager.NavigateToPayees();
	}

	private sealed class EditModel
	{

		[Required]



		public string? Name { get; set; }
		public Category? Category { get; set; }
    }
}