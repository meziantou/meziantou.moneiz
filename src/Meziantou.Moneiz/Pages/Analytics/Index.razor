@page "/analytics"
@using Meziantou.Moneiz.Core.Analytics
@inject DatabaseProvider DatabaseProvider

<h1>Analytics</h1>

<LoadingIndicator IsLoading="database == null">
    <h2>Accounts</h2>
    <div class="form-group">
        <div style="display: flex; gap: 12px">
            @foreach (var currency in allAccounts.Select(a => a.CurrencyIsoCode).Distinct().OrderBy(c => c))
            {
                <a @onclick="() => SelectByCurrency(currency)">@currency</a>
            }
        </div>
        <div style="display: flex; gap: 12px">
            <a @onclick="() => SelectByType(AccountType.Current)">Current</a>
            <a @onclick="() => SelectByType(AccountType.Saving)">Saving</a>
        </div>
        <ul class="unstyled">
            @foreach (var account in allAccounts)
            {
                <li>
                    <label>
                        <input name="Accounts" type="checkbox" checked="@selectedAccounts.Contains(account)" @onclick="() => Toggle(account)">
                        <span>@account (@account.CurrencyIsoCode)</span>
                        @if (account.Closed)
                        {
                            <span> (closed)</span>
                        }
                    </label>
                </li>
            }
        </ul>
    </div>

    <h2>Period</h2>
    <div class="form-group">
        <a @onclick="()=>SelectCurrentMonth()">This month</a> -
        <a @onclick="()=>SelectCurrentYear()">This year</a> -
        <a @onclick="()=> SelectLastXDays(30)">Last 30 days</a> -
        <a @onclick="()=>SelectLastXDays(365)">Last 365 days</a>
    </div>

    <div class="form-group">
        <label for="PeriodFrom">From</label>
        <input type="date" id="PeriodFrom" @bind-value="@fromDate" />
    </div>

    <div class="form-group">
        <label for="PeriodTo">To</label>
        <input type="date" id="PeriodTo" @bind-value="@toDate" />
    </div>

    <button type="button" @onclick="() => Generate()">Generate</button>

    @if (model != null)
    {
        <label style="margin-top: 1rem"><input type="checkbox" @bind-value="showDetails" /> Show details</label>
        <BigTable Model="model.BigTable" ShowDetails="showDetails" />
        <BalanceHistory Model="model.BalanceHistory" ShowDetails="showDetails" />
        <BalanceHistoryChart Model="model.BalanceHistory" />
    }
</LoadingIndicator>

@code {
    Database database;
    IList<Account> allAccounts;

    DateOnly fromDate = Database.GetToday().AddDays(-30);
    DateOnly toDate = Database.GetToday();
    HashSet<Account> selectedAccounts = new HashSet<Account>();

    bool showDetails;
    AnalyticsModel model;

    protected override async Task OnInitializedAsync()
    {
        database = await DatabaseProvider.GetDatabase();
        allAccounts = database.VisibleAccounts.Concat(database.ClosedAccounts).ToList();
        selectedAccounts.AddRange(allAccounts.Where(account => !account.Closed));
    }

    private void SelectByCurrency(string currency)
    {
        var accounts = allAccounts.Where(a => a.CurrencyIsoCode == currency);
        if (selectedAccounts.Intersect(accounts).Count() != accounts.Count())
        {
            selectedAccounts.AddRange(accounts);
        }
        else
        {
            foreach (var account in accounts)
            {
                selectedAccounts.Remove(account);
            }
        }
    }

    private void SelectByType(AccountType accountType)
    {
        var accounts = allAccounts.Where(a => a.AccountType == accountType);
        if (selectedAccounts.Intersect(accounts).Count() != accounts.Count())
        {
            selectedAccounts.AddRange(accounts);
        }
        else
        {
            foreach (var account in accounts)
            {
                selectedAccounts.Remove(account);
            }
        }
    }

    private void SelectCurrentYear()
    {
        toDate = Database.GetToday();
        fromDate = new DateOnly(toDate.Year, 1, 1);
    }

    private void SelectCurrentMonth()
    {
        toDate = Database.GetToday();
        fromDate = new DateOnly(toDate.Year, toDate.Month, 1);
    }

    private void SelectLastXDays(int days)
    {
        toDate = Database.GetToday();
        fromDate = toDate.AddDays(-days);
    }

    private void Toggle(Account account)
    {
        if (!selectedAccounts.Remove(account))
        {
            selectedAccounts.Add(account);
        }
    }

    private void Generate()
    {
        model = AnalyticsModel.Build(database, selectedAccounts.ToArray(), fromDate, toDate);
    }
}