@page "/transactions"
@page "/accounts/{AccountId:int}/transactions"
@page "/categories/{CategoryId:int}/transactions"
@page "/category-group/{CategoryGroup}/transactions"
@page "/payees/{PayeeId:int}/transactions"
@using System.Globalization
@using System.Diagnostics.CodeAnalysis
@using System.Diagnostics
@inject DatabaseProvider DatabaseProvider
@inject ConfirmService ConfirmService
@inject SettingsProvider SettingsProvider
@inject NavigationManager NavigationManager

@if (account is not null)
{
    <h1>Transactions of @account</h1>
}
else
{
    <h1>My transactions</h1>
}

<div class="toolbar">
    <div class="toolbar-left">
        <p style="margin-top: 0.5rem; margin-bottom: 0.5rem">
            <CreateTransactionLink Account="account"><i class="fa fa-plus-circle"></i> Create transaction</CreateTransactionLink>
        </p>
        <p>
            <label>
                <input type="checkbox" inert="@HasSearch" checked="@ShowReconciledTransactions()" @onchange="() => ToggleReconciledVisibility()" /> Show reconciled transactions
            </label>
        </p>
    </div>

    @if (account is not null)
    {
        <div class="account-balance">
            <div>
                <span class="account-balance-title">On <UserDate Date="@today" />:</span>
                <Amount Value="@database.GetTodayBalance(account)" Currency="@account.CurrencyIsoCode" />
            </div>
            <div>
                <span class="account-balance-title">All transactions:</span>
                <Amount Value="@database.GetBalance(account)" Currency="@account.CurrencyIsoCode" />
            </div>
            <div>
                <span class="account-balance-title">Reconciled transactions:</span>
                <span>
                    <Amount Value="@database.GetReconciledBalance(account)" Currency="@account.CurrencyIsoCode" />
                </span>
            </div>
            <div>
                <span class="account-balance-title">Checked transactions:</span>
                <span id="CheckedBalanceContainer">
                    <Amount Value="@database.GetCheckedBalance(account)" Currency="@account.CurrencyIsoCode" />
                </span>
            </div>
            <div class="account-balance-actions">
                <a class="btn btn-primary" @onclick="Reconcile">Reconcile</a>
            </div>
        </div>
    }
</div>

<div class="input-group mb-3">
    <input type="text" value="@Search" @oninput="OnSearch" class="form-control" placeholder="🔍 Search">
</div>

<Repeater Items="transactions?.Skip(pageIndex * displaySettings.PageSize).Take(displaySettings.PageSize)">
    <RepeaterContainerTemplate>
        <table>
            <thead>
                <tr>
                    <th></th>
                    <th>Operation Date</th>
                    @if (AccountId is null)
                    {
                        <th>Account</th>
                    }
                    <th>Category</th>
                    <th>Title</th>
                    <th>Amount</th>
                    @if (CanShowAccountBalanceOnTransaction)
                    {
                        <th>Balance</th>
                    }
                    <th>Comment</th>
                    <th></th>
                </tr>
            </thead>

            @if (pageIndex > 0)
            {
                <tr>
                    <td colspan="7" class="row-navigation">
                        <a @onclick="() => pageIndex--" style="cursor: pointer">Newer transactions</a>
                    </td>
                </tr>
            }

            @context

            @if (HasMorePages())
            {
                <tr>
                    <td colspan="7" class="row-navigation">
                        <a @onclick="() => pageIndex++" style="cursor: pointer">Older transactions</a>
                    </td>
                </tr>
            }
        </table>
    </RepeaterContainerTemplate>

    <ItemTemplate Context="transactionWithAccountBalance">
        @{
            var (transaction, accountBalance) = transactionWithAccountBalance;
        }
        <tr>
            <td class="transaction-state">
                @if (transaction.State is TransactionState.Reconciliated)
                {
                    <div class="btn-transaction-status fas fa-check-square" title="@transaction.State"></div>
                }
                else if (transaction.State is TransactionState.Checked)
                {
                    <div class="btn-transaction-status far fa-check-square" title="@transaction.State" @onclick="() => Uncheck(transaction)"></div>
                }
                else
                {
                    <div class="btn-transaction-status far fa-square" title="@transaction.State" @onclick="() => Check(transaction)"></div>
                }
            </td>
            <td @ondblclick="() => BeginInlineEdit(transaction, EditColumn.Date)">
                @if (currentEdit?.Id == transaction.Id && editColumn is EditColumn.Date)
                {
                    <input type="date" @ref="inlineEditorInput"
                           value="@BindConverter.FormatValue(currentEdit.ValueDate, "yyyy-MM-dd", CultureInfo.InvariantCulture)"
                           @oninput="e => currentEdit.ValueDate = ParseDate((string)e.Value, currentEdit.ValueDate)"
                           @onkeydown="e => InlineEditorKeyDown(e)"
                           @onblur="e => EndInlineEdit()" />
                }
                else
                {
                    <UserDate Date="@transaction.ValueDate" />
                }
            </td>
            @if (AccountId is null)
            {
                <td>@transaction.Account.Name</td>
            }
            <td title="@transaction.Category">@transaction.Category?.Name</td>
            <td>@transaction.FinalTitle</td>
            <td @ondblclick="() => BeginInlineEdit(transaction, EditColumn.Amount)">
                @if (currentEdit?.Id == transaction.Id && editColumn == EditColumn.Amount)
                {
                    <input type="number" @ref="inlineEditorInput"
                           value="@currentEdit.Amount"
                           @oninput="e => currentEdit.Amount = Convert.ToDecimal(e.Value)"
                           @onkeydown="e => InlineEditorKeyDown(e)"
                           @onblur="e => EndInlineEdit()" />
                }
                else
                {
                    <Amount Value="@transaction.Amount" Currency="@transaction.Account.CurrencyIsoCode" />
                }
            </td>
            @if (CanShowAccountBalanceOnTransaction)
            {
                <td><Amount Value="@accountBalance" Currency="@transaction.Account.CurrencyIsoCode" /></td>
            }
            <td @ondblclick="() => BeginInlineEdit(transaction, EditColumn.Comment)">
                @if (currentEdit?.Id == transaction.Id && editColumn == EditColumn.Comment)
                {
                    <input type="text" @ref="inlineEditorInput"
                           value="@currentEdit.Comment"
                           @oninput="e => currentEdit.Comment = (string)e.Value"
                           @onkeydown="e => InlineEditorKeyDown(e)"
                           @onblur="e => EndInlineEdit()" />
                }
                else
                {
                    @transaction.Comment
                }
            </td>
            <td class="commands">
                <Dropdown>
                    <DropdownItem><CreateTransactionLink DuplicatedTransaction="transaction" class="duplicate"><i class="fas fa-copy"></i> Duplicate</CreateTransactionLink></DropdownItem>
                    <DropdownItem><CreateTransactionLink Transaction="transaction" class="view-transactions"><i class="fas fa-pencil-alt"></i> Edit</CreateTransactionLink></DropdownItem>
                    <DropdownItem><button type="button" class="btn-link" @onclick="() => Delete(transaction)"><i class="fas fa-trash" style="color: red"></i> Delete</button></DropdownItem>

                    @if (transaction.Payee != null)
                    {
                        <DropdownItem><a class="view-transactions" href="/payees/@(transaction.Payee.Id)/transactions"><i class="fas fa-search"></i> View Transactions with payee '@transaction.Payee.Name'</a></DropdownItem>
                    }

                    @if (transaction.Category != null)
                    {
                        <DropdownItem><a class="view-transactions" href="/categories/@(transaction.Category.Id)/transactions"><i class="fas fa-search"></i> View Transactions with category '@transaction.Category.Name'</a></DropdownItem>

                        if (transaction.Category.GroupName != null)
                        {
                            <DropdownItem><a class="view-transactions" href="/category-group/@(Uri.EscapeDataString(transaction.Category.GroupName))/transactions"><i class="fas fa-search"></i> View Transactions with category group '@transaction.Category.GroupName'</a></DropdownItem>
                        }
                    }

                    <DropdownItem><a href="/scheduler/create?CreateFromTransactionId=@(transaction.Id)"><i class="fas fa-calendar"></i> Make recurrent</a></DropdownItem>
                </Dropdown>
            </td>
        </tr>
    </ItemTemplate>
</Repeater>

@code {
    MoneizDisplaySettings displaySettings;
    Database database;
    Account account;
    IReadOnlyList<TransactionWithAccountBalance> transactions;
    int pageIndex = 0;
    DateOnly today;
    bool showReconciled = true;
    TransactionEdit currentEdit = null;
    EditColumn editColumn;
    ElementReference inlineEditorInput;

    [Parameter]
    public int? AccountId { get; set; }

    [Parameter]
    public int? CategoryId { get; set; }

    [Parameter]
    public string CategoryGroup { get; set; }

    [Parameter]
    public int? PayeeId { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "search")]
    public string Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        displaySettings = await SettingsProvider.GetDisplaySettings();
        database = await DatabaseProvider.GetDatabase();
        today = Database.GetToday();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccountId != null)
        {
            showReconciled = await SettingsProvider.GetShowReconciliatedTransactions(AccountId ?? -1) ?? showReconciled;
        }

        HasSearch = !string.IsNullOrWhiteSpace(Search);
        CanShowAccountBalanceOnTransaction = AccountId is not null && CategoryId is null && CategoryGroup is null && PayeeId is null && !HasSearch;
        LoadTransactions();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (currentEdit is not null && inlineEditorInput.Id is not null)
        {
            await inlineEditorInput.FocusAsync();
        }
    }

    [MemberNotNullWhen(true, nameof(AccountId))]
    private bool CanShowAccountBalanceOnTransaction { get; set; }

    [MemberNotNullWhen(true, nameof(Search))]
    private bool HasSearch { get; set; }

    private bool ShowReconciledTransactions() => showReconciled || HasSearch;

    private async Task ToggleReconciledVisibility()
    {
        showReconciled = !showReconciled;
        await SettingsProvider.SetShowReconciliatedTransactions(AccountId ?? -1, showReconciled);
        LoadTransactions();
    }

    private async Task Check(Transaction transaction)
    {
        database.CheckTransaction(transaction);
        await DatabaseProvider.Save();
    }

    private async Task Uncheck(Transaction transaction)
    {
        database.UncheckTransaction(transaction);
        await DatabaseProvider.Save();
    }

    private async Task Delete(Transaction transaction)
    {
        if (await ConfirmService.Confirm($"Do you want to delete this transaction?"))
        {
            database.RemoveTransaction(transaction);
            await DatabaseProvider.Save();
            LoadTransactions();
        }
    }

    private bool HasMorePages()
    {
        return transactions.Count > (pageIndex + 1) * displaySettings.PageSize;
    }

    private async Task Reconcile()
    {
        var amount = AmountUtilities.FormatAmount(database.GetCheckedBalance(account));
        if (!await ConfirmService.Confirm($"Balance of '{account}': {account?.CurrencyIsoCode}{amount}.\nDo you confirm this balance?"))
            return;

        database.Reconcile(account);
        await DatabaseProvider.Save();
        if (!showReconciled)
        {
            LoadTransactions();
        }
    }

    private void OnSearch(ChangeEventArgs e)
    {
        Search = (string)e.Value;
        LoadTransactions();
    }

    private void LoadTransactions()
    {
        var sw = Stopwatch.StartNew();

        IEnumerable<Transaction> result = database.Transactions;
        if (!ShowReconciledTransactions())
        {
            result = result.Where(t => !t.ReconciliationDate.HasValue);
        }

        if (AccountId != null)
        {
            account = database.GetAccountById(AccountId);
            result = result.Where(t => t.Account == account);
        }
        else
        {
            account = null;
        }

        if (PayeeId != null)
        {
            var payee = database.GetPayeeById(PayeeId);
            result = result.Where(t => t.Payee == payee);
        }

        if (CategoryId != null)
        {
            var category = database.GetCategoryById(CategoryId);
            result = result.Where(t => t.Category == category);
        }

        if (!string.IsNullOrEmpty(CategoryGroup))
        {
            result = result.Where(t => string.Equals(t.Category?.GroupName, CategoryGroup, StringComparison.OrdinalIgnoreCase));
        }

        if (HasSearch)
        {
            var query = TransactionQueries.TransactionQuery.Build(Search);
            result = result.Where(t => query.Evaluate(t));
        }

        result = result.OrderByDescending(t => t.ValueDate).ThenBy(t => t.Payee?.Name);

        if (CanShowAccountBalanceOnTransaction)
        {
            var balance = database.GetBalance(account);
            var list = new List<TransactionWithAccountBalance>(capacity: displaySettings.PageSize);
            foreach (var transaction in result)
            {
                list.Add(new(transaction, balance));
                balance -= transaction.Amount;
            }

            transactions = list;
        }
        else
        {
            transactions = result.Select(t => new TransactionWithAccountBalance(t, 0m)).ToArray();
        }

        Console.WriteLine($"LoadTransactions: {sw.ElapsedMilliseconds}ms");
    }

    private void BeginInlineEdit(Transaction transaction, EditColumn column)
    {
        currentEdit = TransactionEdit.FromTransaction(transaction, editCurrentTransaction: true);
        editColumn = column;
    }

    private async Task InlineEditorKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await EndInlineEdit();
        }
        else if (e.Key == "Escape")
        {
            currentEdit = null;
        }
    }

    private async Task EndInlineEdit()
    {
        if (currentEdit != null)
        {
            currentEdit.Save(database);
            await DatabaseProvider.Save();
            currentEdit = null;
            LoadTransactions();
        }
    }

    private DateOnly ParseDate(string value, DateOnly defaultValue)
    {
        if (BindConverter.TryConvertTo(value, CultureInfo.InvariantCulture, out DateOnly result))
            return result;

        return defaultValue;
    }

    private enum EditColumn
    {
        Amount,
        Comment,
        Date,
    }

    private record struct TransactionWithAccountBalance(Transaction Transaction, decimal AccountBalanceAfterTransaction);
}
