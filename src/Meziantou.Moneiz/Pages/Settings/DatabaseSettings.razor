@page "/database"
@inject NavigationManager NavigationManager
@inject DatabaseProvider DatabaseProvider

@if (database != null)
{
    <p>Last modification: <span title="@database.LastModifiedDate">@(RelativeDate.Get(database.LastModifiedDate))</span></p>
}

<LoadingIndicator IsLoading="databaseConfiguration == null">
    <h1>GitHub</h1>

    <EditForm Model="databaseConfiguration">
        <div class="form-group">
            <label>
                GitHub token (<a href="https://github.com/settings/tokens">generate</a>)
                <input type="password" @bind-value="databaseConfiguration!.GitHubToken" />
            </label>
        </div>

        <div class="form-group">
            <label>
                GitHub repository name
                @if (databaseConfiguration.IsGitHubConfigured())
                {
                    <span>(<a @onclick="OpenGitHubRepository">view on GitHub</a>)</span>
                }
                <InputText @bind-Value="databaseConfiguration.GitHubRepository" />
            </label>
        </div>

        <div class="form-group">
            <label>
                Auto-load from GitHub repository
                <InputCheckbox @bind-Value="databaseConfiguration.GitHubAutoLoad" />
            </label>
        </div>

        @if (githubOperation)
        {
            <p><i class="fas fa-spin fa-spinner"></i> processing</p>
        }
        else
        {
            <button type="button" @onclick="() => SaveGitHubConfig()">Save configuration</button>
            <button type="button" @onclick="() => ImportDatabaseFromGitHub()">Import from GitHub</button>
            <button type="button" @onclick="() => ExportDatabaseToGitHub()">Export to GitHub</button>
        }

    </EditForm>
</LoadingIndicator>

<h1>File</h1>

<p>Export</p>
<button @onclick="() => ExportDatabaseToFile()">Export</button>

<p>Import database</p>
<form>
    <div class="form-group">
        <label>
            Database file
            <InputFile OnChange="ImportDatabaseFromFile" />
        </label>
    </div>
</form>

@code {
    Database? database;
    DatabaseConfiguration? databaseConfiguration;
    bool githubOperation = false;

    protected override async Task OnInitializedAsync()
    {
        database = await DatabaseProvider.GetDatabase();
        databaseConfiguration = await DatabaseProvider.LoadConfiguration();
    }

    private async Task ExportDatabaseToFile()
    {
        await DatabaseProvider.ExportToFile();
    }

    private async Task ImportDatabaseFromFile(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        var file = files.FirstOrDefault();
        if (file == null)
            return;

        try
        {
            using var ms = file.OpenReadStream();
            var database = await Database.Load(ms);
            await DatabaseProvider.Import(database);
            GlobalInterop.Alert("Database imported");
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            GlobalInterop.Alert("Cannot import database:" + ex);
        }
    }

    private async Task ExportDatabaseToGitHub()
    {
        try
        {
            githubOperation = true;
            await SaveGitHubConfig();
            await DatabaseProvider.ExportToGitHub();
        }
        finally
        {
            githubOperation = false;
        }
    }

    private async Task ImportDatabaseFromGitHub()
    {
        try
        {
            githubOperation = true;
            await SaveGitHubConfig();
            await DatabaseProvider.ImportFromGitHub(implicitLoad: false);
        }
        finally
        {
            githubOperation = false;
        }
    }

    private async Task SaveGitHubConfig()
    {
		Debug.Assert(databaseConfiguration != null);
        await DatabaseProvider.SetConfiguration(databaseConfiguration);
    }

    private async Task OpenGitHubRepository()
    {
        await DatabaseProvider.OpenGitHubRepository();
    }
}