@page "/accounts"
@inject DatabaseProvider DatabaseProvider

<h1>Accounts</h1>

<div class="toolbar">
    <a class="btn" href="/accounts/create">Create an account</a>
</div>

<Repeater Items="@database?.Accounts.Sort()">
    <RepeaterContainerTemplate>
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Currency</th>
                    <th></th>
                </tr>
            </thead>
            @context
        </table>
    </RepeaterContainerTemplate>

    <ItemTemplate Context="account">
        <tr>
            @if (account.Closed)
            {
                <td>@account (<i class="fas fa-times"></i> closed)</td>
            }
            else
            {
                <td>@account</td>
            }
            <td>@account.CurrencyIsoCode</td>
            <td class="commands">
                <Dropdown>
                    <li><a class="view-transactions" href="/accounts/@account.Id/transactions"><i class="fas fa-search"></i> View Transactions</a></li>
                    <li><button type="button" class="btn-link" @onclick="() => MoveUp(account)"><i class="fas fa-arrow-up"></i> Move up</button></li>
                    <li><button type="button" class="btn-link" @onclick="() => MoveDown(account)"><i class="fas fa-arrow-down"></i> Move down</button></li>
                    <li><a class="edit" href="/accounts/@account.Id/edit"><i class="fas fa-pencil-alt"></i> Edit</a></li>
                    <li><button type="button" class="btn-link" @onclick="() => Delete(account)"><i class="fas fa-trash" style="color: red"></i> Delete</button></li>
                </Dropdown>
            </td>
        </tr>
    </ItemTemplate>
</Repeater>

@code {
    Database? database;

    protected override async Task OnInitializedAsync()
    {
        database = await DatabaseProvider.GetDatabase();
    }

    public async Task MoveUp(Account account)
    {
		Debug.Assert(database != null);
        database.MoveUpAccount(account);
        await DatabaseProvider.Save();
    }

    public async Task MoveDown(Account account)
	{
		Debug.Assert(database != null);
        database.MoveDownAccount(account);
        await DatabaseProvider.Save();
    }

    public async Task Delete(Account account)
	{
		Debug.Assert(database != null);
        if (GlobalInterop.Confirm($"Do you really want to delete '{account}'?"))
        {
            database.RemoveAccount(account);
            await DatabaseProvider.Save();
        }
    }
}