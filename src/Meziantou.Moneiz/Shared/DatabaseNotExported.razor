@inject DatabaseProvider DatabaseProvider
@implements IDisposable

@if (needImport)
{
    <a class="database-not-exported" href="/database"><span>A new version is available</span></a>
}

@if (needExport)
{
    if (canExportToGitHub)
    {
		@if (isExporting)
		{
			<span class="exporting">Exporting...</span>
		}
		else
		{
		    <button type="button" @onclick="ExportToGitHub">Export to GitHub</button>
		}
    }
    else
    {
        <a class="database-not-exported" href="/database"><span>Export database</span></a>
    }
}

@code {
    private bool needImport;
    private bool needExport;
    private bool canExportToGitHub;
    private bool isExporting;
    private System.Threading.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        timer = new System.Threading.Timer(CheckNewVersion, state: null, TimeSpan.FromSeconds(60), TimeSpan.FromSeconds(60));
        DatabaseProvider.DatabaseSaved += DatabaseChanged;
        await GetState();
    }

    public void Dispose()
    {
        DatabaseProvider.DatabaseSaved -= DatabaseChanged;
        timer?.Dispose();
    }

    private void DatabaseChanged(object sender, EventArgs e)
    {
        if (needImport)
        {
            needImport = false;
            InvokeAsync(() => StateHasChanged());
        }

        InvokeAsync(() => GetState());
    }

    private async Task GetState()
    {
        var hasUnexportedChanges = await DatabaseProvider.HasLocalChanges();
        canExportToGitHub = await DatabaseProvider.IsGitHubConfigured();
        needExport = hasUnexportedChanges;
        StateHasChanged();
    }

    private async Task ExportToGitHub()
    {
        isExporting = true;
        StateHasChanged();
        await Task.Yield();

        try
        {
            await DatabaseProvider.ExportToGitHub();
        }
        finally
        {
            isExporting = false;
        }
    }

    private async void CheckNewVersion(object o)
    {
        if (needExport)
            return;

        if (!await DatabaseProvider.IsGitHubConfigured())
            return;

        needImport = await DatabaseProvider.HasNewVersionOnGitHub();
        await InvokeAsync(() => StateHasChanged());
    }
}