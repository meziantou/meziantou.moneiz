using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Threading.Tasks;

namespace Meziantou.Moneiz.ExchangeRatesGenerator;

internal static class Program
{
    private static async Task Main(string[] args)
    {
        using var httpClient = new HttpClient();

        /*
         * {
         *   "AED": "United Arab Emirates Dirham",
         *   "AFN": "Afghan Afghani",
         *   "ALL": "Albanian Lek",
         * }
         */
        var currencies = await httpClient.GetFromJsonAsync<Dictionary<string, string>>("https://openexchangerates.org/api/currencies.json?show_alternative=true&show_inactive=true");

        var rates = new Dictionary<string, double>(StringComparer.Ordinal);
        var openExchangeRatesApiKey = args.Length > 1 ? args[1] : null;
        if (openExchangeRatesApiKey is not null)
        {
            var exchangeRates = await httpClient.GetFromJsonAsync<ExchangeRatesResponse>("https://openexchangerates.org/api/latest.json?show_alternative=true&prettyprint=false&app_id=" + openExchangeRatesApiKey);
            rates = exchangeRates.Rates;
        }

        // Build source
        var sb = new StringBuilder();
        _ = sb.Append($$"""
// <auto-generated/>
namespace Meziantou.Moneiz.Core
{
    partial class Database
    {
        internal static System.Collections.Generic.IReadOnlyList<Currency> InitializeCurrencies()
        {
            var result = new Currency[{{currencies.Count.ToString(CultureInfo.InvariantCulture)}}];
""");
        var i = 0;
        foreach (var currency in currencies)
        {
            var exchangeRate = rates.GetValueOrDefault(currency.Key, 1d);

            _ = sb.AppendLine(CultureInfo.InvariantCulture, $"            result[{i}] = new Currency(\"{currency.Key}\", \"{currency.Value}\", {exchangeRate}m);");
            i++;
        }

        _ = sb.Append(@"            return result;
        }
    }
}
");

        await File.WriteAllTextAsync(args[0], sb.ToString());
        Console.WriteLine("File written to " + Path.GetFullPath(args[0]));
        Console.WriteLine(sb.ToString());
    }

    private sealed class ExchangeRatesResponse
    {
        public Dictionary<string, double> Rates { get; set; }
    }
}
